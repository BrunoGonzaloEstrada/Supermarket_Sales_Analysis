# -*- coding: utf-8 -*-
"""Supermarket_Sales_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rirnf--ygKWnmBsyYJE7rTs3KDjya0rl

##**PROBLEMA DE NEGOCIO**

Una cadena de Supermecados online que opera en Brasil quiere obtener insights sobre la ventas de sus productos.

#**Preguntas**

1.¿Cuales son las ventas totales por año?¿Que año tuvo mejor desempeño?

2.¿Cuales son los 7 productos que mas ganancias mostraron durante todo el período?

3.Si separamos las ventas totales por año y por regiones.¿Que insights podemos obtener de nuestras ventas?

4.¿Cual es el método de envío más utilizado por los clientes del Supermecado?¿Es proporcional para B2B Y B2C?

5.¿Cuáles son las ventas totales por trimestre en el estado de São Paulo?

6.¿Cuál es el top 5 de las ciudades con mayor cantidad de pedidos?

#**1.Configuración del Ambiente**
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
global df_ventas, df_ventas_limpio # uso estas variables grabales para trabajar

!python -V
print('------')
!pip show Pandas | grep 'Name\|Version'
print('------')
!pip show Matplotlib | grep 'Name\|Version'

"""#**2.Obtención y Tratamiento de Datos**"""

def obtencion_datos():
  global df_ventas, df_ventas_limpio

  #Carga de datos
  dataset = pd.read_csv('reporte_ventas.csv')
  df_ventas= dataset.copy()

  #información del dataset
  print('INFORMACIÓN:')
  print(df_ventas.info())
  print('-----------------')
  print('DUPLICADOS:')
  print(df_ventas.duplicated().sum())
  print('-----------------')
  print('REGISTROS DE PRUEBA:')
  print((df_ventas.nombre_cliente == 'prueba').sum())
  print('-----------------')
  print('REGISTRO CON GANANCIAS MENORES O IGUAL A  0:')
  print((df_ventas.total_ganancia <= 0).sum())
  print('-----------------')
  #Empiezo tratamiento de datos

  #Transformar columnas 'fechas_columna' y 'fecha_envio' de 'object' a 'datetime para poder trabajar los graficos
  df_ventas['fecha_pedido'] = pd.to_datetime(df_ventas['fecha_pedido'],format='%Y-%m-%d')
  df_ventas['fecha_envio'] = pd.to_datetime(df_ventas['fecha_envio'],format='%Y-%m-%d')

  #Elimino Repetidos
  df_ventas_limpio=df_ventas.drop_duplicates()

  #Elimino filas de la columna 'nombre_cliente' que sean == a 'prueba'
  df_ventas_limpio =df_ventas_limpio[~(df_ventas_limpio.nombre_cliente =='prueba')]

  #Elimino filas con valor nulo en la columna 'nombre_cliente'
  df_ventas_limpio[df_ventas_limpio.nombre_cliente.isnull()]
  df_ventas_limpio = df_ventas_limpio[~(df_ventas_limpio.nombre_cliente.isnull())]

  #Filtro en la columna 'total_ganancia' los valores mayores a 0
  (df_ventas_limpio.total_ganancia > 0).sum()
  df_ventas_limpio=df_ventas_limpio[(df_ventas_limpio.total_ganancia > 0)]

  #Actualizo el indice para que quede ordenado
  df_ventas_limpio.index = range(len(df_ventas_limpio))

  #información del dataset después del Tratamiento
  print('')
  print('INFORMACIÓN DEL DATASET DESPUÉS DEL TRATAMIENTO:')
  print('')
  print('INFORMACIÓN:')
  print(df_ventas_limpio.info())
  print('-----------------')
  print('DUPLICADOS:')
  print(df_ventas_limpio.duplicated().sum())
  print('-----------------')
  print('REGISTROS DE PRUEBA:')
  print((df_ventas_limpio.nombre_cliente == 'prueba').sum())
  print('-----------------')
  print('REGISTRO CON GANANCIAS MENORES O IGUAL A  0:')
  print((df_ventas_limpio.total_ganancia <= 0).sum())

obtencion_datos()

"""#**3.Preguntas y Respuestas**

##**1.-¿Cuales son las ventas totales por año?¿Que año tuvo mejor desempeño?**
"""

def pregunta_1():
  global df_ventas, df_ventas_limpio

  #Creo un nuevo DataFrame para trabajar
  dataset = df_ventas_limpio[['fecha_pedido','total_venta']]
  df_ventas_año = pd.DataFrame(dataset)

  #Creo una columna 'año' extrayendo solamente el año de la columna 'fecha_pedido'
  df_ventas_año['año'] = df_ventas_año['fecha_pedido'].dt.year

  #Ahora elimino la columna 'fecha_pedido' del dataset
  df_ventas_año.drop(['fecha_pedido'], axis=1,inplace=True)

  #Generamos una agrupacion por 'año' y los sumo las ventas
  df_ventas_año = df_ventas_año.groupby(by='año')
  df_ventas_año = df_ventas_año[['total_venta']].agg(func='sum')
  df_ventas_año = df_ventas_año.reset_index()

  #Visualización
  fig, ax = plt.subplots(figsize=(10,4))

  años =list(df_ventas_año.año.drop_duplicates())
  años = [str(numero) for numero in años]

  ventas =list(df_ventas_año['total_venta'].round(0))
  ventas = [int(numero) for numero in ventas]

  ax.bar(años,ventas,color=['#CDDBF3','#CDDBF3','#CDDBF3','#0077b6'], width=0.8,bottom=1)

  #Agrego los valores a las barras
  for bar in ax.patches:
    valor = bar.get_height()
    qtd = f'USD $ {valor:,.0f}'.replace(',', '.')
    ax.text(bar.get_x()+bar.get_width()/2.0,valor,qtd,ha='center',va='bottom')

  #Oculto los valores y los indicadores del eje y
  ax.set_yticks([])

  #Oculto los bordes
  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)
  ax.spines['bottom'].set_visible(False)
  ax.spines['left'].set_visible(False)

  #Porcentaje de un año a otro
  porcentaje_aumento = ((ventas[3] - ventas[2]) / ventas[2]) * 100

  #Agrego indicaciones
  ax.text(bar.get_x() + bar.get_width() / 0.95, 0.7 * valor, f'En 2022, las ventas\n'
    'en el Supermecado aumentaron\n'
    f'aproximadamente {porcentaje_aumento:.2f}% \n'
    'comparado con el año anterior', ha='left', va='bottom', color='#0077b6', fontsize=10)

  #Agrego titulo
  plt.title('Ventas Totales por Año\n (2019-2022)',ha='center')
  plt.show()

pregunta_1()

"""##**2.¿Cuales son los 7 productos que mas ganancias mostraron durante todo el período?**"""

def pregunta_2():
  global df_ventas, df_ventas_limpio

  #Creo un nuevo DataFrame para trabajar
  dataset = df_ventas_limpio[['tipo_producto','total_ganancia']]
  df_top_ganancias = pd.DataFrame(dataset)

  #Generamos una agrupacion por 'tipo_producto' y los sumo las ganancias
  df_top_ganancias = df_top_ganancias.groupby(by='tipo_producto')
  df_top_ganancias = df_top_ganancias[['total_ganancia']].agg(func='sum')

  #Ordeno el resultado en forma descendiente
  df_top_ganancias = df_top_ganancias.sort_values('total_ganancia')

  #Selecciono los ultimos 7 primeros registros
  df_top_ganancias = df_top_ganancias[10:]

  #Visualización
  colores=['#0C8040','#0C8040','#adb5bd','#0077b6','#0077b6','#0077b6','#0077b6']
  fig, ax = plt.subplots(figsize=(10,4))
  ax.barh( df_top_ganancias.index,df_top_ganancias['total_ganancia'],color=colores, align='center')

  ventas = list(df_top_ganancias['total_ganancia'].round(0))
  ventas = [int(numero) for numero in ventas]

  for i,valor in enumerate(ventas):
    qtd = f'USD $ {valor:,.0f}'.replace(',', '.')
    ax.text(valor, i, qtd, ha='right', va='center',color='white',fontsize=12)

  #Oculto los bordes
  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)
  ax.spines['bottom'].set_visible(False)
  ax.spines['left'].set_visible(False)

  #Agrego indicaciones
  ax.text(ax.get_xlim()[1] * 0.98, 0.53 * len(ventas), f'Los datos indican que los 4 productos que generan\n'
          'mayor ganancia son del departamento de Electrónicos.\n\n'
          'Podemos notar también que el departamento de \n'
           'Productos de Limpieza tiene 2 productos con\n'
          'buen margen de ganacia, totalizando $ 109 mil\ndurante el período analizado.'
          , ha='left', va='bottom', color='#0077b6', fontsize=10)

  #Oculto los valores del eje x los indicadores del eje y
  ax.set_xticks([])
  ax.tick_params(axis='y', which='both', left=False)

  #Agrego titulo
  plt.title('Top 7 Productos con Mayor Ganancia (2019-2022)',ha='center',fontsize=15)
  plt.show()

pregunta_2()

"""##**3. Si separamos las ventas totales por año y por regiones.¿Que insights podemos obtener de nuestras ventas?**"""

def pregunta_3():
  global df_ventas, df_ventas_limpio

  #Creo un nuevo DataFrame para trabajar
  df_ventas_año_region = df_ventas_limpio[['fecha_pedido','region','total_venta']].copy()

  #Creo una nueva columna 'año' y guardo solamente el año
  df_ventas_año_region['año'] = df_ventas_limpio['fecha_pedido'].dt.year

  #Elimino la columna 'fecha_pedido'
  df_ventas_año_region.drop(['fecha_pedido'], axis=1,inplace=True)

  #Genero una tabla cruzada con el método pd.crosstab
  df_ventas_año_region = pd.crosstab(index = df_ventas_año_region['año'], columns = df_ventas_año_region['region'], values = df_ventas_año_region['total_venta'], aggfunc="sum")
  df_ventas_año_region = df_ventas_año_region[['Sureste','Noreste','Centro-Oeste','Norte','Sur']]

  #Visualización
  colores=['#0077b6', '#00b4d8', '#90e0ef', '#adb5bd', '#dee2e6']
  ax = df_ventas_año_region.plot(kind='bar', stacked=True, figsize=(15,8), color=colores)

  #Genero valores sobre cada segmento
  for container in ax.containers:
    labels = [f'USD ${valor.get_height():,.0f}'.replace(',', '.') for valor in container] #Convertir a texto y adicionar símbolo de $ al inicio
    ax.bar_label(container, label_type='center', labels=labels, color='white',fontsize=12)

  #Agrego indicaciones
  comentario ='89,1% de las ventas en el supermecado\nestán concentradas en las regiones\nSureste,Noreste y Centro-Oeste desde 2019.'
  plt.annotate(comentario, xy=(0.95, 0.5), xycoords='axes fraction', fontsize=10, ha='left', va='center', color='#0077b6')

  #Agrego un titulo
  ax.set_title('Ventas del Supermecado por región\n(2019-2022)',fontsize=15)

  #Oculto los bordes
  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)
  ax.spines['bottom'].set_visible(False)
  ax.spines['left'].set_visible(False)

  #Oculto los valores y los indicadores del eje y
  ax.set_yticks([])

  # Ocultar la etiqueta del eje x ('año')
  ax.set_xlabel('')

  # Ocultar los indicadores del eje x y rotar los años horizontalmente
  ax.tick_params(axis='x', which='both', bottom=False, top=False, rotation=0)

  plt.show()

pregunta_3()

"""##**4.¿Cual es el método de envío más utilizado por los clientes del Supermecado?¿Es proporcional para B2B Y B2C?**"""

def pregunta_4():
    global df_ventas, df_ventas_limpio

    #Preparación de los datos
    df_modo_envio = df_ventas_limpio[['modo_envio', 'segmento_cliente']]

    # Generar tabla cruzada con el método pd.crosstab
    tabla_cruzada = pd.crosstab(index=df_modo_envio['modo_envio'], columns=df_modo_envio['segmento_cliente'])
    tabla_cruzada = tabla_cruzada.sort_values(by='B2B')

    #Visualización
    colores = ['#0077b6', '#CDDBF3']

    # Configurar la figura y el eje
    fig, ax = plt.subplots(figsize=(10, 4))

    # Crear el gráfico de barras horizontales
    for idx, seg in enumerate(tabla_cruzada.index):
        ax.barh(seg, tabla_cruzada.loc[seg]['B2B'], color=colores[0], label='B2B' if idx == 0 else '')
        ax.barh(seg, tabla_cruzada.loc[seg]['B2C'], left=tabla_cruzada.loc[seg]['B2B'], color=colores[1], label='B2C' if idx == 0 else '')

    # Colocar etiquetas dentro de cada segmento
    for container in ax.containers:
        labels = [f"{valor:,.0f}".replace(',', '.') for valor in container.datavalues]
        ax.bar_label(container, label_type='center', labels=labels , color='white',fontsize=12)

    #Oculto los bordes
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)

    #Agrego indicaciones
    ax.text(ax.get_xlim()[1] * 0.98, ax.get_ylim()[0] + 0.50 * (ax.get_ylim()[1] - ax.get_ylim()[0]),
    'La Entrega estandar es el\n'
    'metodo de envío preferido por\n'
    'los clientes del Supermecado,\n'
    'representa 59% de los pedidos,\n'
    'no hay diferencia entre segmentos',ha='left', va='bottom', color='#0077b6', fontsize=10)
    #Oculto los valores y los indicadores del eje y
    ax.set_xticks([])
    ax.tick_params(axis='y', which='both', left=False)

    # Añadir leyenda y etiquetas
    ax.legend(title='Metodo envío',loc='lower center',frameon=False)
    ax.set_title('Método de envío más utilizado por los clientes B2B|B2C (2019-2022)',fontsize=15)

    # Mostrar el gráfico
    plt.show()

pregunta_4()

"""##**5.¿Cuáles son las ventas totales por trimestre en el estado de São Paulo?**"""

def pregunta_5():
    global df_ventas, df_ventas_limpio

    # Creando un dataframe con los valores deseados
    df_ventas_sp = df_ventas_limpio.copy()
    df_ventas_sp = df_ventas_sp.query('estado == "São Paulo"')[["fecha_pedido", "total_venta"]]
    df_ventas_sp.set_index('fecha_pedido', inplace=True)
    df_ventas_sp = df_ventas_sp.resample('Q').agg('sum')
    df_ventas_sp['total_venta'] = round(df_ventas_sp['total_venta'] / 1e3, 2)
    df_ventas_sp = df_ventas_sp.reset_index()

    # Área del gráfico y tema de la visualización
    fig, ax = plt.subplots(figsize=(14, 4))

    # Gráfico
    puntos_a_marcar = [True if mes.month == 12 else False for mes in pd.to_datetime(df_ventas_sp['fecha_pedido'])]
    ax.plot(df_ventas_sp['fecha_pedido'], df_ventas_sp['total_venta'], lw=3, color='#CDDBF3', marker='o',
            markersize=10, markerfacecolor='#0077b6', markevery=puntos_a_marcar)

    # Personalizando el gráfico
    ax.set_title('Ventas por trimestre en el estado de São Paulo', fontsize=18, color='#212529', loc='left')
    ax.text(0.3, 0.95, 'De 2019 a 2022 (en miles de dólares)', transform=ax.transAxes, color='#495057',
            fontsize=12)
    ax.set_xlabel('')
    ax.set_ylabel('')
    ax.set_yticklabels([])
    ax.set_yticks([])
    ax.set_frame_on(False)
    ax.xaxis.set_tick_params(labelsize=14, labelcolor='#495057')
    ax.tick_params(axis='both', which='both', length=0)
    ax.yaxis.grid(False)
    ax.xaxis.grid(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    plt.ylim(0, 400)

    # Definiendo el intervalo entre trimestres y colocando los nombres de los meses en los labels
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))
    x_labels = ['Mar', 'Jun', 'Set', 'Dic'] * 4
    ax.set_xticks(df_ventas_sp.fecha_pedido)
    ax.set_xticklabels(x_labels, ha='center')

    # Ajustando el eje x colocando un nivel encima de la granularidad por medio de la exposición del año
    texto = [16 * " " + str(i) + 16 * " " for i in range(2019, 2023)]
    ax.text(ax.get_xbound()[0] + 35, -80,
            f'|{texto[0]}|{texto[1]}|{texto[2]}|{texto[3]}|', fontsize=14, color='#495057')

    # Añadiendo etiquetas de trimestres y años
    for i in range(3, len(df_ventas_sp["total_venta"]), 4):
        ax.text(x=ax.get_xticks()[i], y=df_ventas_sp['total_venta'][i] + 20,
                s=f"${df_ventas_sp['total_venta'][i].round(1)}mil", color='#0077b6', weight='bold', fontsize=10)
        ax.text(x=ax.get_xticks()[i] + 118, y=df_ventas_sp['total_venta'][i] + 20,
                s=f"(4º tri {2019 + int(i/4)})", color='#495057', weight='bold', fontsize=10)

pregunta_5()

"""##**6.¿Cuál es el top 5 de las ciudades con mayor cantidad de pedidos?**"""

def pregunta_6():
    global df_ventas, df_ventas_limpio

    # Filtrar la información relevante
    df_ciudades_pedidos = df_ventas_limpio[['ciudad', 'cantidad_pedido']]

    # Agrupar por ciudad y sumar la cantidad de pedidos
    pedidos_por_ciudad = df_ciudades_pedidos.groupby('ciudad')['cantidad_pedido'].sum().sort_values(ascending=False)

    # Seleccionar las 5 ciudades con mayor cantidad de pedidos
    top5_ciudades = pedidos_por_ciudad.head(5)

    # Visualizar los resultados
    fig, ax = plt.subplots(figsize=(10, 4))
    colores = ['#0077b6', '#00b4d8', '#90e0ef', '#adb5bd', '#dee2e6']
    top5_ciudades.plot(kind='bar', color=colores, stacked=True)

    for container in ax.containers:
      labels = [f'{valor.get_height():.0f}' for valor in container]
      ax.bar_label(container, label_type='center', labels=labels, color='white',fontsize=12)

    # Oculto los bordes
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)

    # Ocultar los indicadores del eje x y rotar las etiquetas horizontalmente
    ax.tick_params(axis='x', which='both', bottom=False, top=False)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

    ax.set_xlabel('Ciudades',fontsize=11)
    ax.set_ylabel('Cantidad de Pedidos',fontsize=12)
    ax.set_title('Top 5 Ciudades con Mayor Cantidad de Pedidos',fontsize=15)

    # Agregar cuadrículas
    ax.grid(True, axis='y', linestyle='--',alpha=0.5)

    plt.show()

pregunta_6()